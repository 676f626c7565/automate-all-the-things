name: app-build-and-deploy

trigger:
  branches:
    include:
      - main  
  paths:
    include:
      - my-app/*

variables:
  - group: aws-keys
  - name: AWS_REGION
    value: AATT_AWS_REGION # This value was modified by the initial-setup python script
  - name: APP_NAME
    value: AATT_APP_NAME # This value was modified by the initial-setup python script
  - name: DOCKERHUB_USERNAME
    value: AATT_DOCKERHUB_USERNAME # This value was modified by the initial-setup python script
  - name: USER_EMAIL
    value: AATT_USER_EMAIL # This value was modified by the initial-setup python script
 
pool:
  vmImage: 'ubuntu-latest' 
  # If you are using a self-hosted agent, comment out the previous line and uncomment the following three
  # name: <agent-pool-name> # Insert here the name of the agent pool you created
  # demands:
  #   - agent.name -equals <agent-name> # Insert here the name of the agent you created

stages:
- stage: BuildApp
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    steps:
    - task: DockerInstaller@0
      displayName: Install Docker
      inputs:
        dockerVersion: '17.09.0-ce'

    - task: Docker@2
      displayName: Build And Push Image
      inputs:
        containerRegistry: 'dockerhub'
        repository: '$(DOCKERHUB_USERNAME)/$(APP_NAME)'
        command: 'buildAndPush'
        Dockerfile: 'my-app/Dockerfile'



- stage: DeployDev
  condition: succeeded()
  jobs:
  - job: DeployDevJob
    steps:

    # In this case it's necessary to specify the checkout with the persistCredential options set to true. This will enable us to push the changes to the repo.
    - checkout: self
      persistCredentials: true

    - script: |
        sed 's/tag:.*/tag: $(Build.BuildId)/g' helm/my-app/values-dev.yaml > helm/my-app/values-dev.temp
        mv helm/my-app/values-dev.temp helm/my-app/values-dev.yaml
      displayName: Update Tag In values-dev.yaml

    - script: |
        git config --global user.email "AzureDevOps@Build&DeployAppPipeline.com"
        git config --global user.name "Azure DevOps - Build & Deploy App Pipeline"
        git checkout -b main
        git add helm/my-app/values-dev.yaml 
        git commit -m "App version tag updated to $(Build.BuildId) by Azure DevOps"
        git push --set-upstream origin main
      displayName: 'Push changes to GitHub'
      
    - script: |
        echo "##vso[task.setvariable variable=latestCommit]$(git rev-parse HEAD)"
      displayName: 'Output the latest commit SHA to a variable'

    - script: |
        mkdir ~/.aws
        echo -e "[default]\naws_access_key_id = $(aws_access_key_id)\naws_secret_access_key = $(aws_secret_access_key)" > ~/.aws/credentials
        echo -e "[default]\nregion = $(AWS_REGION)"> ~/.aws/config 
      displayName: 'Configure AWS Profile'

    - script: |
        echo "false" > is-active.txt
        while [ "$(cat is-active.txt)" != "true" ]; do
            sleep 5
            aws elbv2 describe-load-balancers > lb-status.json
            json_data=$(cat lb-status.json)
            state_code=$(echo "$json_data" | jq -r '.LoadBalancers[1].State.Code')
            if [[ "$state_code" == "active" ]]; then
              echo "true" > is-active.txt
            else
              echo "Load balancer is not ready yet..."
            fi
        done
      displayName: Wait for Load Balancer Status

    - task: AWSCLI@1
      displayName: Update KubeConfig
      inputs:
        awsCredentials: 'aws'
        regionName: '$(AWS_REGION)' 
        awsCommand: 'eks'
        awsSubCommand: 'update-kubeconfig'
        awsArguments: '--name $(APP_NAME)-cluster --region $(AWS_REGION)' 

    - script: |
        kubectl get ingress -n $(APP_NAME)-dev $(kubectl get ingress -n $(APP_NAME)-dev | awk 'NR>1{print $1}') -o=jsonpath="{'http://'}{.status.loadBalancer.ingress[].hostname}{'\n'}" > my-app-url.txt
      displayName: Save URL

    - task: PublishBuildArtifacts@1
      displayName: 'Export URL'
      inputs:
        PathtoPublish: 'my-app-url.txt'
        ArtifactName: 'URL'
        publishLocation: 'Container'
        



- stage: DeployTest
  condition: succeeded()
  # dependsOn: DeployDev
  jobs:
  - job: DeployTestJob
    steps:

    # In this case it's necessary to specify the checkout with the persistCredential options set to true. This will enable us to push the changes to the repo.
    - checkout: self
      persistCredentials: true
      #clean: true
  
    # Every time the pipeline performs a "checkout" step it will checkout the same commit, so we need this step to pull for the changes commited in the previous stage   
    - script: |
        git pull origin main
      displayName: Update repo
      
    - script: |
        sed 's/tag:.*/tag: $(Build.BuildId)/g' helm/my-app/values-test.yaml > helm/my-app/values-test.temp
        mv helm/my-app/values-test.temp helm/my-app/values-test.yaml
      displayName: Update Tag In values-test.yaml

    - script: |
        git config --global user.email "AzureDevOps@Build&DeployAppPipeline.com"
        git config --global user.name "Azure DevOps - Build & Deploy App Pipeline"
        git checkout -b main
        git add helm/my-app/values-test.yaml 
        git commit -m "App version tag updated to $(Build.BuildId) by Azure DevOps"
        git push --set-upstream origin main
      displayName: 'Push changes to GitHub'

    - script: |
        mkdir ~/.aws
        echo -e "[default]\naws_access_key_id = $(aws_access_key_id)\naws_secret_access_key = $(aws_secret_access_key)" > ~/.aws/credentials
        echo -e "[default]\nregion = $(AWS_REGION)"> ~/.aws/config 
      displayName: 'Configure AWS Profile'

    - script: |
        echo "false" > is-active.txt
        while [ "$(cat is-active.txt)" != "true" ]; do
            sleep 5
            aws elbv2 describe-load-balancers > lb-status.json
            json_data=$(cat lb-status.json)
            state_code=$(echo "$json_data" | jq -r '.LoadBalancers[1].State.Code')
            if [[ "$state_code" == "active" ]]; then
              echo "true" > is-active.txt
            else
              echo "Load balancer is not ready yet..."
            fi
        done
      displayName: 'Wait for Load Balancer Status'

    - task: AWSCLI@1
      displayName: 'Update KubeConfig'
      inputs:
        awsCredentials: 'aws'
        regionName: '$(AWS_REGION)' 
        awsCommand: 'eks'
        awsSubCommand: 'update-kubeconfig'
        awsArguments: '--name $(APP_NAME)-cluster --region $(AWS_REGION)' 

    - script: |
        kubectl get ingress -n $(APP_NAME)-test $(kubectl get ingress -n $(APP_NAME)-test | awk 'NR>1{print $1}') -o=jsonpath="{'http://'}{.status.loadBalancer.ingress[].hostname}{'\n'}" > my-app-url.txt
      displayName: 'Save URL'

    - task: PublishBuildArtifacts@1
      displayName: 'Export URL'
      inputs:
        PathtoPublish: 'my-app-url.txt'
        ArtifactName: 'URL'
        publishLocation: 'Container' 
        



- stage: DeployProd
  condition: succeeded()
  # dependsOn: DeployDev
  jobs:
  - job: ApproveRelease
    timeoutInMinutes: 1440 # Job times out in 24hs
    pool: server
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: '$(USER_EMAIL)'
        instructions: 'Please validate and approve deployment to prod.'

  - job: DeployProdJob
    steps:

    # In this case it's necessary to specify the checkout with the persistCredential options set to true. This will enable us to push the changes to the repo.
    - checkout: self
      persistCredentials: true
      #clean: true
      
    # Every time the pipeline performs a "checkout" step it will checkout the same commit, so we need this step to pull for the changes commited in the previous stage   
    - script: |
        git pull origin main
      displayName: Update repo

    - script: |
        sed 's/tag:.*/tag: $(Build.BuildId)/g' helm/my-app/values-prod.yaml > helm/my-app/values-prod.temp
        mv helm/my-app/values-prod.temp helm/my-app/values-prod.yaml
      displayName: Update Tag In values-prod.yaml

    - script: |
        git config --global user.email "AzureDevOps@Build&DeployAppPipeline.com"
        git config --global user.name "Azure DevOps - Build & Deploy App Pipeline"
        git checkout -b main
        git add helm/my-app/values-prod.yaml 
        git commit -m "App version tag updated to $(Build.BuildId) by Azure DevOps"
        git push --set-upstream origin main
      displayName: 'Push changes to GitHub'

    - script: |
        mkdir ~/.aws
        echo -e "[default]\naws_access_key_id = $(aws_access_key_id)\naws_secret_access_key = $(aws_secret_access_key)" > ~/.aws/credentials
        echo -e "[default]\nregion = $(AWS_REGION)"> ~/.aws/config 
      displayName: 'Configure AWS Profile'

    - script: |
        echo "false" > is-active.txt
        while [ "$(cat is-active.txt)" != "true" ]; do
            sleep 5
            aws elbv2 describe-load-balancers > lb-status.json
            json_data=$(cat lb-status.json)
            state_code=$(echo "$json_data" | jq -r '.LoadBalancers[1].State.Code')
            if [[ "$state_code" == "active" ]]; then
              echo "true" > is-active.txt
            else
              echo "Load balancer is not ready yet..."
            fi
        done
      displayName: 'Wait for Load Balancer Status'

    - task: AWSCLI@1
      displayName: 'Update KubeConfig'
      inputs:
        awsCredentials: 'aws'
        regionName: '$(AWS_REGION)' 
        awsCommand: 'eks'
        awsSubCommand: 'update-kubeconfig'
        awsArguments: '--name $(APP_NAME)-cluster --region $(AWS_REGION)' 

    - script: |
        kubectl get ingress -n $(APP_NAME)-prod $(kubectl get ingress -n $(APP_NAME)-prod | awk 'NR>1{print $1}') -o=jsonpath="{'http://'}{.status.loadBalancer.ingress[].hostname}{'\n'}" > my-app-url.txt
      displayName: 'Save URL'

    - task: PublishBuildArtifacts@1
      displayName: 'Export URL'
      inputs:
        PathtoPublish: 'my-app-url.txt'
        ArtifactName: 'URL'
        publishLocation: 'Container'
