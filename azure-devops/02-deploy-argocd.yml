name: deploy-argocd

trigger: none

# resources:
#   repositories:
#   - repository: automate-all-the-things # The name used to reference this repository in the checkout step
#     type: github
#     endpoint: tferrari92 # Name of the service connection # AATT_GITHUB_USERNAME # This value was modified by the initial-setup python script
#     name: tferrari92/automate-all-the-things # AATT_GITHUB_USERNAME
  # pipelines:
  # - pipeline: deploy-eks # any arbitrary name
  #   source: deploy-eks   # name of the pipeline shown on azure UI portal
  #   # source: "AATT_GITHUB_USERNAME.automate-all-the-things (2)"   # Name of the pipeline that needs to succeed for this pipeline to run # AATT_GITHUB_USERNAME
  #   trigger:
  #   branches:
  #     include:
  #       - main

variables:
  - group: aws-keys

pool:
  vmImage: 'ubuntu-latest' 
  # If you are using a self-hosted agent, comment out the previous line and uncomment the following three
  # name: <agent-pool-name> # Insert here the name of the agent pool you created
  # demands:
  #   - agent.name -equals <agent-name> # Insert here the name of the agent you created

steps:
- task: HelmInstaller@0
  inputs:
    displayName: Install helm
    helmVersion: '3.11.2'
    installKubectl: true

- task: AWSCLI@1
  displayName: 'Update KubeConfig'
  inputs:
    awsCredentials: 'aws'
    regionName: 'us-east-2' # This value was modified by the initial-setup python script
    awsCommand: 'eks'
    awsSubCommand: 'update-kubeconfig'
    awsArguments: '--name cafe-cluster --region us-east-2' # This value was modified by the initial-setup python script

# - task: AWSCLI@1
#   displayName: 'Check credentials'
#   inputs:
#     awsCredentials: 'aws'
#     regionName: 'us-east-2'
#     awsCommand: 'configure'
#     awsSubCommand: 'list'
    # awsArguments: '--profile myprofile'

# AGREGAR A MANO????? FUNCIONA!!!! AGREGAR A README TUTO PARA AGREGAR VARIABLES A LIBRARY
# Couldn't find a way to create profile with the AWS Toolkit Plugin for Azure DevOps so I had to do it this way
- script: | # This value was modified by the initial-setup python script
    mkdir ~/.aws
    echo -e "[default]\naws_access_key_id = $(aws_access_key_id)\naws_secret_access_key = $(aws_secret_access_key)" > ~/.aws/credentials
    echo -e "[default]\nregion = us-east-2"> ~/.aws/config 
  displayName: 'Configure AWS Profile'


# CON ESTSA OPCION SE VA A CREAR EN AWS UN LOAD BALANCER QUE NO VA A ESATR DENTRO DEL TERRAFORM POR LO  Q HABRA Q BORRARLO ANUALMENTE

# helm repo add eks https://aws.github.io/eks-charts
# helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
#   --set autoDiscoverAwsRegion=true \
#   --set autoDiscoverAwsVpcID=true \
#   --set clusterName=learnk8s


# - task: HelmDeploy@0
#   displayName: Deploy Ingress
#   inputs:
#     connectionType: 'None'
#     namespace: 'ingress-nginx'
#     command: 'install'
#     chartType: 'FilePath'
#     chartPath: 'helm/ingress-controller'
#     releaseName: 'ingress-nginx'
#     arguments: '--dependency-update --create-namespace'

# TEST IT
  # kubectl get service ingress-nginx-controller --namespace=ingress-nginx


# - task: HelmDeploy@0
#   displayName: Deploy ArgoCD
#   inputs:
#     connectionType: 'None'
#     namespace: 'argocd'
#     command: 'upgrade'
#     chartType: 'Name'
#     chartName: 'argo/argo-cd'
#     chartVersion: '5.34.1'
#     releaseName: 'argocd'
#     arguments: '--dependency-update --create-namespace'


- task: HelmDeploy@0
  displayName: Deploy ArgoCD
  inputs:
    connectionType: 'None'
    namespace: 'argocd'
    command: 'install'
    chartType: 'FilePath'
    chartPath: 'helm/argo-cd'
    # releaseName: 'argocd'
    arguments: '--dependency-update --create-namespace'
  # continueOnError: true # SACARRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

- script: |
    kubectl apply -f ./ingress/argocd-ingress.yaml
  displayName: 'Create Ingress'


- script: |
    kubectl get ingress argocd-ingress -n argocd -o=jsonpath="{'http://'}{.status.loadBalancer.ingress[].hostname}{'\n'}" > argocd-access.txt
    echo "admin" >> argocd-access.txt
    echo $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) >> argocd-access.txt
  displayName: 'Save Access'


- task: PublishBuildArtifacts@1
  displayName: 'Export Access'
  inputs:
    PathtoPublish: 'argocd-access.txt'
    # PathtoPublish: '$(Pipeline.Workspace)'
    ArtifactName: 'AdminPass'
    publishLocation: 'Container'

# - task: HelmDeploy@0
#   inputs:
#     connectionType: 'None'
#     namespace: 'argocd'
#     command: 'upgrade'
#     chartType: 'Name'
#     chartName: 'argocd'
#     arguments: '--dependency-update --create-namespace'

# - script: kubectl create -f argocd/application.yaml
#   displayName: 'Create ArgoCD Application'

