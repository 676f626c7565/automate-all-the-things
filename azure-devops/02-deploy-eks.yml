name: deploy-eks

resources:
  repositories:
  - repository: automate-all-the-things # The name used to reference this repository in the checkout step
    type: github
    endpoint: tferrari92 # Name of the service connection
    name: tferrari92/automate-all-the-things
#  - repository: MyBitbucketRepo
#    type: bitbucket
#    endpoint: MyBitbucketServiceConnection
#    name: MyBitbucketOrgOrUser/MyBitbucketRepo

trigger:
  paths:
    include:
    - azure-devops/02-deploy-eks.yml

# Select the self-hosted agent
# pool:
#   name: lenovo # Agent Pool Name
#   demands:
#     - agent.name -equals lenovo-agent # Agent Name

# Or choose this if you have free parallelism
pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

# Install Terraform
- task: TerraformInstaller@0
  displayName: install terraform
  inputs:
    terraformVersion: '1.4.6'

# Checkout repo
- checkout: automate-all-the-things

# Verify checkout
- script: ls
  displayName: 'Verify checkout'

# Terraform init
- task: TerraformCLI@0
  displayName: 'Terraform init'
  inputs:
    command: init
    workingDirectory: './terraform/aws/'
    backendType: aws # set to `aws` to use aws backend
    backendServiceAws: aws # service connection name, required if backendType = aws
    providerServiceAws: 'aws' # This depends on the AWS Service Connection included with the AWS Toolkit. It uses a sevice connection created on the project called 'aws' so we dont't have to include the access_key and secret_key values.
    providerAwsRegion: us-east-2 # Required


# Terraform plan
- task: TerraformCLI@0
  displayName: 'Terraform plan'
  inputs:
    command: plan
    workingDirectory: './terraform/aws/'
    providerServiceAws: 'aws' # This depends on the AWS Service Connection included with the AWS Toolkit. It uses a sevice connection created on the project called 'aws' so we dont't have to include the access_key and secret_key values.
    providerAwsRegion: us-east-2 # Required

# Terraform apply
- task: TerraformCLI@0
  displayName: 'Terraform apply'
  inputs:
    command: apply
    workingDirectory: './terraform/aws/'
    providerServiceAws: 'aws' # This depends on the AWS Service Connection included with the AWS Toolkit. It uses a sevice connection created on the project called 'aws' so we dont't have to include the access_key and secret_key values.
    providerAwsRegion: us-east-2 # Required


- task: TerraformCLI@0
  displayName: 'terraform output'
  inputs:
    command: output
    # ensure working directory targets same directory as apply step
    # if not specified $(System.DefaultWorkingDirectory) will be used
    workingDirectory: './terraform/aws/'

- script: terraform output -json > outputs.json
  workingDirectory: './terraform/aws/'
  displayName: 'Save outputs kubeconfig'


# Save terraform state file
- task: PublishBuildArtifacts@1
  displayName: 'Export kubeconfig'
  inputs:
    # PathtoPublish: '$(Pipeline.Workspace)/s/terraform/backend/terraform.tfstate'
    PathtoPublish: '$(Pipeline.Workspace)'
    ArtifactName: 'Kubeconfig'
    publishLocation: 'Container'
    # condition: always()
