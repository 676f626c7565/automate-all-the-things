name: deploy-eks

resources:
  repositories:
  - repository: automate-all-the-things # The name used to reference this repository in the checkout step
    type: github
    endpoint: tferrari92 # Name of the service connection
    name: tferrari92/automate-all-the-things
#  - repository: MyBitbucketRepo
#    type: bitbucket
#    endpoint: MyBitbucketServiceConnection
#    name: MyBitbucketOrgOrUser/MyBitbucketRepo

trigger:
  paths:
    include:
    - azure-devops/02-deploy-eks.yml

# Select the self-hosted agent
# pool:
#   name: lenovo # Agent Pool Name
#   demands:
#     - agent.name -equals lenovo-agent # Agent Name

# Or choose this if you have free parallelism
pool:
  vmImage: 'ubuntu-latest'

steps:
# Install Terraform
- task: TerraformInstaller@0
  displayName: Install terraform
  inputs:
    terraformVersion: '1.4.6'

# Checkout repo
- checkout: automate-all-the-things

# Verify checkout
- script: ls
  displayName: 'Verify checkout'

# Terraform init
- task: TerraformCLI@0
  displayName: 'Terraform init'
  inputs:
    command: init
    workingDirectory: './terraform/aws/'
    backendType: aws # set to `aws` to use aws backend
    backendServiceAws: aws # service connection name, required if backendType = aws
    providerServiceAws: 'aws' # This depends on the AWS Service Connection included with the AWS Toolkit. It uses a sevice connection created on the project called 'aws' so we dont't have to include the access_key and secret_key values.
    providerAwsRegion: us-east-2 # Required


# Terraform plan
- task: TerraformCLI@0
  displayName: 'Terraform plan'
  inputs:
    command: plan
    workingDirectory: './terraform/aws/'
    providerServiceAws: 'aws' # This depends on the AWS Service Connection included with the AWS Toolkit. It uses a sevice connection created on the project called 'aws' so we dont't have to include the access_key and secret_key values.
    providerAwsRegion: us-east-2 # Required

# Terraform apply
- task: TerraformCLI@0
  displayName: 'Terraform apply'
  inputs:
    command: apply
    workingDirectory: './terraform/aws/'
    providerServiceAws: 'aws' # This depends on the AWS Service Connection included with the AWS Toolkit. It uses a sevice connection created on the project called 'aws' so we dont't have to include the access_key and secret_key values.
    providerAwsRegion: us-east-2 # Required


# - script: terraform output -json > $(System.DefaultWorkingDirectory)/outputs.json
#   workingDirectory: './terraform/aws/'
#   displayName: 'Save outputs'

- script: terraform output -raw kubeconfig > $(System.DefaultWorkingDirectory)/s/python/kubeconfig-data
  workingDirectory: './terraform/aws/'
  displayName: 'Save kubeconfig'

# - task: CmdLine@2
#   inputs:
#     script: 'tree /F'

# - script: terraform output kubeconfig > $(System.DefaultWorkingDirectory)/kubeconfig2.yaml
#   workingDirectory: './terraform/aws/'
#   displayName: 'Save outputs'

- task: PythonScript@0
  displayName: 'Format kubeconfig'
  inputs:
    scriptSource: 'filePath'
    scriptPath: 'python/format-kubeconfig.py'


# Save terraform state file
- task: PublishBuildArtifacts@1
  displayName: 'Export kubeconfig'
  inputs:
    # PathtoPublish: '$(Pipeline.Workspace)/s/kubeconfig'
    PathtoPublish: '$(Pipeline.Workspace)'
    ArtifactName: 'Kubeconfig'
    publishLocation: 'Container'
    # condition: always()
